FROM ubuntu:22.04 as model_gen_yolo
user root
ENV DEBIAN_FRONTEND=noninteractive
ARG BUILD_DEPENDENCIES="python3 python3-pip python3-opencv"
RUN apt -y update && \
    apt install -y ${BUILD_DEPENDENCIES} && \
    rm -rf /var/lib/apt/lists/* && rm -rf /tmp/*
RUN apt -y update && apt install -y wget && \
    rm -rf /var/lib/apt/lists/* && rm -rf /tmp/*
RUN pip install ultralytics
COPY gen_openvino_yolov8.py .
RUN python3 gen_openvino_yolov8.py 


FROM ubuntu:22.04 as release
WORKDIR /yolo_ov_demo
user root
ENV DEBIAN_FRONTEND=noninteractive
ARG BUILD_DEPENDENCIES="vim libgtk2.0-dev pkg-config python3-dev python3-tk gpg wget python3-pip ocl-icd-libopencl1"
RUN apt -y update && \
    apt install -y ${BUILD_DEPENDENCIES} && \
    rm -rf /var/lib/apt/lists/* && rm -rf /tmp/*
RUN apt -y update && apt install -y wget && \
    rm -rf /var/lib/apt/lists/* && rm -rf /tmp/*

# app dependencies
ARG INCLUDE_REALSENSE

# Enumerate cameras via: rs list 
RUN if [ "$INCLUDE_REALSENSE" = "Y" ]; then echo "pyrealsense2: Yes" && sleep 2 && pip install pyrealsense2 realsense-cli; else echo "pyrealsense2: No" && sleep 2; fi
#RUN pip install openvino==2024.3.0
RUN pip install "paho-mqtt<2.0.0"
RUN pip install termcolor timm ultralytics
#RUN pip install tensorflow

# Intel gfx/media client drivers
RUN wget -qO - https://repositories.intel.com/gpu/intel-graphics.key | gpg --yes --dearmor --output /usr/share/keyrings/intel-graphics.gpg; echo "deb [arch=amd64,i386 signed-by=/usr/share/keyrings/intel-graphics.gpg] https://repositories.intel.com/gpu/ubuntu jammy client" | tee /etc/apt/sources.list.d/intel-gpu-jammy.list; apt update
ARG BUILD_DEPENDENCIES="nasm yasm libmfx-dev libva-dev vim libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio gstreamer1.0-vaapi libmfx1 libmfxgen1 libmfx-tools libvpl2 libva-drm2 libva-x11-2 libva-wayland2 libva-glx2 vainfo intel-media-va-driver-non-free ffmpeg build-essential git pkg-config python3-dev cmake pkg-config python3-opencv unzip"
RUN apt -y update && \
    apt install -y ${BUILD_DEPENDENCIES} && \
    rm -rf /var/lib/apt/lists/* && rm -rf /tmp/*

# OpenCL GPU Compute drivers https://github.com/intel/compute-runtime/releases
RUN mkdir neo; cd neo; \
wget https://github.com/intel/intel-graphics-compiler/releases/download/igc-1.0.17193.4/intel-igc-core_1.0.17193.4_amd64.deb; \
wget https://github.com/intel/intel-graphics-compiler/releases/download/igc-1.0.17193.4/intel-igc-opencl_1.0.17193.4_amd64.deb; \
wget https://github.com/intel/compute-runtime/releases/download/24.26.30049.6/intel-level-zero-gpu-dbgsym_1.3.30049.6_amd64.ddeb; \
wget https://github.com/intel/compute-runtime/releases/download/24.26.30049.6/intel-level-zero-gpu_1.3.30049.6_amd64.deb;  \
wget https://github.com/intel/compute-runtime/releases/download/24.26.30049.6/intel-opencl-icd-dbgsym_24.26.30049.6_amd64.ddeb; \
wget https://github.com/intel/compute-runtime/releases/download/24.26.30049.6/intel-opencl-icd_24.26.30049.6_amd64.deb; \
wget https://github.com/intel/compute-runtime/releases/download/24.26.30049.6/libigdgmm12_22.3.20_amd64.deb; \
dpkg -i *.deb

# OpenCV build with HWA GPU and DNN modules
RUN wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null; echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | tee /etc/apt/sources.list.d/oneAPI.list; apt update -y; apt install -y libdnnl2 && rm -rf /var/lib/apt/lists/* && rm -rf /tmp/*

RUN wget https://github.com/opencv/opencv/archive/refs/tags/4.9.0.zip && unzip 4.9.0.zip; cd opencv-4.9.0/; mkdir -p build; cd build; cmake -DBUILD_opencv_dnn=ON  -DCMAKE_INSTALL_PREFIX=$(python3 -c "import sys; print(sys.prefix)") -DBUILD_opencv_python2=OFF -DBUILD_opencv_python3=ON -DINSTALL_PYTHON_EXAMPLES=OFF -DBUILD_TESTS=OFF -DPYTHON3_NUMPY_INCLUDE_DIRS=/usr/local/lib/python3.10/dist-packages/numpy/core/include -DOPENCV_PYTHON3_INSTALL_PATH=/usr/local/lib/python3.10/dist-packages -DPYTHON3_PACKAGES_PATH=/usr/lib/python3/dist-packages -DOPENCV_PYTHON3_INSTALL_PATH=$(python3 -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())") -DPYTHON_EXECUTABLE=$(which python3) -DBUILD_DOCS=OFF -DVIDEOIO_PLUGIN_LIST="mfx;ffmpeg;gstreamer" ..; cmake --build . --config Release -- -j`nproc`; make install; echo $(python3 -c "import cv2; print(cv2.__version__)")

#RUN wget -O sample.mp4 https://github.com/intel-iot-devkit/sample-videos/raw/master/store-aisle-detection.mp4 
#RUN wget -O sample.mp4 https://download.pexels.com/vimeo/421906504/pexels-karolina-grabowska-4465029.mp4?width=1920

# Install NPU drivers
# app dependencies
ARG INCLUDE_NPU
RUN if [ "$INCLUDE_NPU" = "Y" ]; then echo "NPU: Yes" && sleep 2 && mkdir npu-drivers && cd npu-drivers && wget https://github.com/intel/linux-npu-driver/releases/download/v1.1.0/intel-driver-compiler-npu_1.1.0.20231117-6904283384_ubuntu22.04_amd64.deb && wget https://github.com/intel/linux-npu-driver/releases/download/v1.1.0/intel-fw-npu_1.1.0.20231117-6904283384_ubuntu22.04_amd64.deb && wget https://github.com/intel/linux-npu-driver/releases/download/v1.1.0/intel-level-zero-npu_1.1.0.20231117-6904283384_ubuntu22.04_amd64.deb && wget https://github.com/oneapi-src/level-zero/releases/download/v1.10.0/level-zero_1.10.0+u22.04_amd64.deb && dpkg -i *.deb; else echo "NPU: No" && sleep 2; fi

ARG INCLUDE_YOLONAS
RUN if [ "$INCLUDE_YOLONAS" = "Y" ]; then echo "YOLO_NAS: Yes" && sleep 2 && pip install super_gradients && pip install "termcolor>=2.4.0"; else echo "YOLO_NAS: No" && sleep 2; fi


ARG USE_IPEX
RUN ls -l  /usr/share/keyrings/; sleep 5
RUN if [ "$USE_IPEX" = "N" ]; then echo "USE_IPEX: No" && sleep 2 && pip install pillow torch torchvision; else echo "USE_IPEX: Yes" && sleep 2 ; fi

RUN if [ "$USE_IPEX" = "Y" ]; then wget -qO - https://repositories.intel.com/gpu/intel-graphics.key | gpg --dearmor --output /usr/share/keyrings/intel-graphics.gpg; \
echo "deb [arch=amd64,i386 signed-by=/usr/share/keyrings/intel-graphics.gpg] https://repositories.intel.com/gpu/ubuntu jammy client" | \
tee /etc/apt/sources.list.d/intel-gpu-jammy.list; \
apt update; apt install level-zero -y; fi

RUN if [ "$USE_IPEX" = "Y" ]; then wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null && echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | tee /etc/apt/sources.list.d/oneAPI.list && apt update && apt install -y intel-oneapi-common-vars=2024.0.0-49406 intel-oneapi-common-oneapi-vars=2024.0.0-49406 intel-oneapi-diagnostics-utility=2024.0.0-49093 intel-oneapi-compiler-dpcpp-cpp=2024.0.2-49895 intel-oneapi-dpcpp-ct=2024.0.0-49381 intel-oneapi-mkl=2024.0.0-49656 intel-oneapi-mkl-devel=2024.0.0-49656 intel-oneapi-mpi=2021.11.0-49493 intel-oneapi-mpi-devel=2021.11.0-49493 intel-oneapi-dal=2024.0.1-25 intel-oneapi-dal-devel=2024.0.1-25 intel-oneapi-ippcp=2021.9.1-5 intel-oneapi-ippcp-devel=2021.9.1-5 intel-oneapi-ipp=2021.10.1-13 intel-oneapi-ipp-devel=2021.10.1-13 intel-oneapi-tlt=2024.0.0-352 intel-oneapi-ccl=2021.11.2-5 intel-oneapi-ccl-devel=2021.11.2-5 intel-oneapi-dnnl-devel=2024.0.0-49521 intel-oneapi-dnnl=2024.0.0-49521 intel-oneapi-tcm-1.0=1.0.0-435 && sleep 5 && echo "Install IPEX-LLM" && pip install --pre --upgrade ipex-llm[xpu] --extra-index-url https://pytorch-extension.intel.com/release-whl/stable/xpu/us/; fi

# Remove OpenCV from ultralytics install
#RUN pip uninstall opencv-python -y


COPY run-usb-camera.sh .
COPY run-rtsp-camera.sh .
COPY multiproc.py .
COPY run-2rtsp-camera.sh .
#COPY --from=model_gen_yolo yolov8n.torchscript .
COPY --from=model_gen_yolo yolo-names.txt .
#COPY --from=model_gen_efficientnet efficientnet-b0.pt .
#COPY --from=model_gen_resnet50 resnet50.pt .
#COPY --from=model_gen_resnet50 resnet50-int8.pt .
COPY torch-demo.py .
COPY efficientnet.labels .
COPY imgnet.labels .

#ENV OPENCV_LOG_LEVEL=DEBUG
#ENV OPENCV_VIDEOIO_DEBUG=1
ENV OPENCV_FFMPEG_CAPTURE_OPTIONS="hw_decoders_any;vaapi"

# Example runs:
## python3 torch-demo.py --source coke.mp4 --disable_classification --device_name "xpu"
## python3 torch-demo.py --source coke.mp4 --use_openvino_backend --cls_model efficientnet
## python3 torch-demo.py --source coke.mp4 --device "GPU" --cls_model efficientnet
## python3 torch-demo.py --source coke.mp4 --device "GPU" --disable_classification
## python3 torch-demo.py --source coke.mp4 --cls_model resnet --enable_int8
## python3 torch-demo.py --source 130322273236 --enable_int8 --device "GPU" --cls_model resnet --print_metrics_interval 15
